@page "/notas"
@using BlocoDeNotas.front.Models
@using BlocoDeNotas.front.Services
@inject NotaService NotaService
@inject AuthService AuthService
@inject NavigationManager Navigation

<style>
    body {
        background-color: #1e1e2f;
        color: #f0f0f0;
        font-family: 'Segoe UI', sans-serif;
    }

    .notas-container {
        max-width: 800px;
        margin: 50px auto;
        padding: 30px;
        background-color: #2c2c3c;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
    }

    textarea {
        width: 100%;
        height: 150px;
        padding: 12px;
        border: none;
        border-radius: 5px;
        background-color: #3a3a4a;
        color: #f0f0f0;
        resize: vertical;
        margin-bottom: 15px;
    }

    .btn {
        padding: 10px 20px;
        margin-right: 10px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
    }

    .btn-salvar {
        background-color: #0078d7;
        color: white;
    }

    .btn-deletar {
        background-color: #ff6b6b;
        color: white;
    }

    .notas-salvas {
        margin-top: 30px;
    }

    .nota-card {
        background-color: #3a3a4a;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 10px;
        cursor: pointer;
    }

        .nota-card:hover {
            background-color: #4a4a5a;
        }
</style>

<div class="notas-container">
    <h3>Bloco de Notas</h3>

    <textarea @bind="notaAtual.Conteudo" placeholder="Escreva sua nota aqui..."></textarea>

    <button class="btn btn-salvar" @onclick="SalvarNota">Salvar</button>
    <button class="btn btn-deletar" @onclick="DeletarNota" disabled="@(notaSelecionada == null)">Deletar</button>

    <div class="notas-salvas">
        <h4>Notas Salvas</h4>
        @foreach (var nota in notas)
        {
            <div class="nota-card" @onclick="() => SelecionarNota(nota)">
                @nota.Conteudo
            </div>
        }
    </div>
</div>

@code {
    private List<NotaModel> notas = new();
    private NotaModel notaAtual = new();
    private NotaModel? notaSelecionada;

    protected override async Task OnInitializedAsync()
    {
        var autenticado = await AuthService.IsAuthenticatedAsync();
        if (!autenticado)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        notas = await NotaService.GetNotasAsync();
    }

    private async Task SalvarNota()
    {
        if (string.IsNullOrWhiteSpace(notaAtual.Conteudo)) return;

        bool sucesso;
        if (notaSelecionada != null)
        {
            notaAtual.Id = notaSelecionada.Id;
            sucesso = await NotaService.AtualizarNotaAsync(notaAtual);
        }
        else
        {
            sucesso = await NotaService.CriarNotaAsync(notaAtual);
        }

        if (sucesso)
        {
            notas = await NotaService.GetNotasAsync();
            notaAtual = new();
            notaSelecionada = null;
        }
    }

    private void SelecionarNota(NotaModel nota)
    {
        notaSelecionada = nota;
        notaAtual = new NotaModel
        {
            Id = nota.Id,
            Conteudo = nota.Conteudo
        };
    }

    private async Task DeletarNota()
    {
        if (notaSelecionada != null)
        {
            var sucesso = await NotaService.DeletarNotaAsync(notaSelecionada.Id);
            if (sucesso)
            {
                notas = await NotaService.GetNotasAsync();
                notaAtual = new();
                notaSelecionada = null;
            }
        }
    }
}